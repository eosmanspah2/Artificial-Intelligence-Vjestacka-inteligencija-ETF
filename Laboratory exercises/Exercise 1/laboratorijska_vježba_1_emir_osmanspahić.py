# -*- coding: utf-8 -*-
"""Laboratorijska vježba 1 - Emir Osmanspahić.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xNzWCouZz9yjFdF8MZESn1094YoLQIwb

Pokretanje raznih primjera iz postavke laboratorijske vježbe
"""

print('Jupyter Notebook - primjer')
x = 42

"""Tekst"""

# Kodne celije dijele isti prostor za varijable
print(x)

import numpy as np

a = np.arange(15).reshape(3, 5)
print(a)
a = np.array([[ 1, 1, 2, 3, 4],[ 5, 6, 7, 8, 9],[10, 11, 12, 13, 14]])
print(a)
print(a.shape)
print(a.ndim)
print(a.dtype)
print(a.itemsize)
print(a.size)
b = np.array([42.0, 42.1, 42.2])
print(b.dtype)

a = np.zeros((3,4))
print(a)
a = np.ones((2,3,4)) # niz matrica
print(a)
b = np.empty((3,3))
print(b)

a = np.array( [20, 30, 40, 50] )
b = np.arange(4)
print(b) 
c = a - b
print(c)
print(b ** 2)
print(10 * np.sin(a))
print(a < 35)

A = np.array([[1,1], [0,1]])
B = np.array([[2,0], [3,4]])
print(A * B)
print(A @ B)

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(0, np.pi*2, 0.05)
y = np.sin(x)
plt.plot(x, y)
plt.xlabel("Ugao")
plt.ylabel("Sinus")
plt.title("Sinusoida")
plt.show()

"""# **Zadaci za rad u laboratoriji**

## Zadatak 1 - osnovno izračunavanje
"""

import math
print(13 * 2.5 ** (124/9.3) + math.sqrt(3))
print(math.cos(math.pi / 3) + math.tan(math.pi) + (math.e)**(math.pi))
print((2 + 3 ** 8) * 10)
print(79 // 18)

"""Zadatak 2

a) Napisati Python program koji prvo od korisnika traži unos 10 elemenata liste. Nakon toga, na ekranu ispisati
drugi najveći element u listi.
"""

import numpy as np
lista = []
n=10
for i in range(0,n):
  element = int(input("Unesite "+ str(i+1)+". element: "))
  lista.append(element)

print("Lista glasi: ", lista)
print("Second largest element is:", sorted(lista)[-2])

"""b) Napisati Python program koji za početnu vrijednost n računa n-ti Fibonacci broj. Obavezno koristiti for petlju."""

def fibonaccijevBroj(n):
  fibonacijeviBrojevi = [0, 1]
  if n > 2:
    for i in range (2, n):
      fibonacijeviBrojevi.append(fibonacijeviBrojevi[i-1] + fibonacijeviBrojevi[i-2])
  return fibonacijeviBrojevi[n-1];

n = int(input("Unesite broj n: "))
if n<= 0:
  print("Unijeli ste negativan broj")
else:
  print(str(n)+". Fibonacijev broj je: "+str(fibonaccijevBroj(n)))

"""c) Napisati Python program koji za zadane vrijednosti a, b, i c računa vrijednosti rješenja kvadratne jednačine,
tj.

x1,2 =
−b ±
√
b
2 − 4ac
2a

U slučaju da je diskriminanta negativna, napisati "Rješenja su kompleksna!" i ne računati rješenja. U slučaju
da je diskriminanta nula, ispisati "Rješenja su ista!" i ispisati rješenje. Obavezno koristiti if strutkuru.
"""

a, b, c = input("Unesite koeficijente a,b i c: ").split()
print("Jednacina glasi: {}x1+{}x2+{}x3".format(a, b, c))
a = int(a)
b = int(b)
c = int(c)
diskriminanta = b ** 2 - 4 * a * c
print("Diskriminanta iznosi: ", diskriminanta)
if diskriminanta > 0:
  x1 = (-1 * b + diskriminanta) / (2 * a)
  x2 = (-1 * b - diskriminanta) / (2 * a)
  print("Rješenja kvadratne jednačine su: ",str(x1)+" i "+ str(x2))
elif diskriminanta == 0:
  x = (-1 * b) / (2 * a)
  print("Rješenja su ista!")
  print("X = ",x)
else:
  print ("Rješenja su kompleksna!")

"""d) Definisati funkciju fact(n) koja računa faktorijel broja n. Zatim definisati funkciju choose(n, k) koja
računa
n
k

. Demonstrirati rad ovih funkcija na primjeru.
"""

def fact(n):  
  return 1 if (n==1 or n==0) else n * fact(n - 1); 

def choose(n,k):
  return fact(n)/(fact(k)*fact(n-k))

n, k = input("Unesite brojeve n i k: ").split()
n = int(n)
k = int(k)
print("Primjer racunanja faktorijela: {}!={}".format(n,fact(n)))
print("Primjer racunanja binomnog koeficijenta: ({} {})={}".format(n,k,choose(n,k)))

"""# Zadatak 3 - Rad sa matricama
Pomoću NumPy, generisati sljedeće matrice:
  a) Matricu dimenzija 4 × 3 čiji su svi elementi nule;

  b) Matricu dimenzija 2 × 2 čiji su svi elementi jedinice;

  c) Vektor-kolonu dužine 10 čiji su elementi brojevi od 1 do 10;

  d) Matricu datu u nastavku:

  e) Za prethodno kreiranu matricu, izračunati:

      (a) Transponovanu matricu;
      (b) Matricu dobivenu sabiranjem transponovane matrice i originalne matrice;
      (c) Proizvod matrice sa sumom njene prve kolone.
  f) Za matricu M prikazati:
  
      (a) Treći red matrice;
      (b) Drugu kolonu matrice;
      (c) Element na lokaciji (0, 2).
  g) Definisati funkciju kvadratna(M) koja prima NumPy 1D niz, te isti preoblikuje u kvadratnu matricu, ukoliko
je to moguće. Ukoliko nije moguće, funkcija ne treba da uradi ništa.
"""

import numpy as np
print("a)---------------------------")
matrica = np.zeros((4,3))
print(matrica)

print("b)------------------------------")
matrica = np.ones((2,2))
print(matrica)

print("c)------------------------------")
matrica = np.arange(10).reshape(10,1)+1
print(matrica)

print("d)------------------------------")
matrica = np.arange(9).reshape(3,3)+1
#matrica = matrica.astype(np.float64)
matrica[1][0] = 1/3.6
matrica[1][2] = 23
matrica[2][0] = 2 ** 10.5
matrica[2][1] = 42
matrica[2][2] = np.cos(80.841)
print(matrica)

print("e)----------------------------")
transponovana = matrica.transpose()
zbir_matrica = matrica + transponovana
suma_kolone = sum(matrica[:,0])
proizvod = matrica * suma_kolone
print("Transponovana matrica: \n",transponovana)
print("Zbir pocetne i njene transponovane matrice: \n",zbir_matrica)
print("Proizvod matrice i njene sume prve kolone \n", proizvod)

print("f)---------------------------")
print("Treći red matrice: \n",matrica[2,:])
print("Druga kolona matrice: \n", matrica[:,1])
print("Element na lokaciji (0,2): \n",matrica[0][2])

print("g)--------------------------")
def kvadratna(M):
  velicina = len(M)
  korijen_velicine = velicina ** 0.5
  provjera_ostatka = (korijen_velicine % 1) == 0
  if provjera_ostatka:
    korijen_velicine = int(korijen_velicine)
    M = np.reshape(M,(korijen_velicine,korijen_velicine))
    return M
M = np.arange(9)
M = kvadratna(M)
print(M)

"""# Zadatak 4 - Rad sa grafikom

a) Neka je data funkcija x = sin(n) na 100 tačaka (n = 1:100). Iscrtati linijski dijagram ove funkcije. Postaviti
odgovarajuće labele, te naslov. Zatim preko tog dijagrama (na isti graf) nacrtati funkciju y = cos(n), također
na 100 uzoraka. Uključiti mrežu (grid);
"""

import matplotlib.pyplot as plt
import numpy as np

n = np.arange(1,101)
x = np.sin(n)
plt.plot(n,x, label = 'sin(n)')
plt.xlabel("n")
plt.ylabel("sin(n) & cos(n)")
plt.title("Sinus i kosinus")

y = np.cos(n)
plt.plot(n,y, label = 'cos(n)')
plt.grid()
plt.legend()
plt.show()

"""b) Ponoviti prethodni zadatak, ali sada iscrtati u istom prozoru (ali na različitim graficima) signale x i y. Postaviti odgovarajuće labele i
naslove za oba grafika;
"""

import matplotlib.pyplot as plt
import numpy as np

n = np.arange(1, 101, 1)
x = np.sin(n)
y = np.cos(n)

plt.figure(1)
plt.plot(n, x)
plt.xlabel("n")
plt.ylabel("sin(n)")
plt.title("Sinus")
plt.grid()

plt.figure(2)
plt.plot(n,y)
plt.xlabel("n")
plt.ylabel("cos(n)")
plt.title("Kosinus")
plt.grid()

plt.show()